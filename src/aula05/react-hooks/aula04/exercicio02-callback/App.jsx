// üöÄ Exerc√≠cio 2 ‚Äì Recria√ß√£o desnecess√°ria de fun√ß√£o (sem useCallback)

import React, { useCallback, useState } from "react"


// Use useCallback para memorizar fun√ß√µes e evitar que mudem a cada render.

// Use React.memo para evitar re-renderiza√ß√µes de componentes filhos.

// Use new Set() apenas se quiser fazer testes de curiosidade t√©cnica, para ver se suas fun√ß√µes est√£o sendo recriadas.

const Filho = React.memo(function Filho({ aoClicar }) {

  console.log('Renderizou Filho')
  return <button onClick={aoClicar}>Clique</button>
})

function App() {
  const [contar, setContar] = useState(0)

  const handleClick = useCallback(() => {
    console.log("Clicou")
  }, [])



  return (
    <>
      <Filho aoClicar={handleClick} />
      <button onClick={() => setContar(c => c + 1)}>Contar: {contar}</button>
    </>
  )
}

// ‚ùìPergunta:
// Por que o componente Filho renderiza toda vez que o bot√£o "Contar" √© clicado, e como voc√™ pode evitar isso com o hook certo?
// O componente Filho renderiza toda vez que Contar √© clicado porque o componente App √© re - renderizado, e o Filho tamb√©m,
// mesmo que a prop aoClicar n√£o mude. Para evitar isso, usamos useCallback para garantir que a fun√ß√£o n√£o mude,
//e tamb√©m envolvemos Filho com React.memo para evitar que ele re - renderize se suas props n√£o mudarem.

export default App